apply plugin: 'com.android.library'

version '1.0.1-SNAPSHOT'

android {
    compileSdkVersion 28
    buildToolsVersion '29.0.2'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 9
        versionName version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    // robolectric
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {

    implementation "androidx.appcompat:appcompat:${rootProject.appCompatVersion}"
    implementation "androidx.annotation:annotation:${rootProject.annotationVersion}"
    implementation "androidx.fragment:fragment:${rootProject.fragmentVersion}"

    testImplementation 'junit:junit:4.12'

    testImplementation 'org.mockito:mockito-core:2.28.2'

    testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
    testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.7'
    testImplementation 'org.powermock:powermock-classloading-xstream:2.0.7'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'

    testImplementation 'org.robolectric:robolectric:4.3'

    def fragment_version = "1.2.4"
    debugImplementation "androidx.fragment:fragment-testing:${fragment_version}"

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'org.mockito:mockito-android:2.28.2'
}

task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = 'javadoc'
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives javadocsJar
    archives sourcesJar
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // You can then customize attributes of the publication as shown below.
                groupId = 'com.braintreepayments'
                artifactId = 'browser-switch'
                version = "${android.defaultConfig.versionName}"

                pom {
                    name = 'browser-switch'
                    packaging = 'aar'
                    description = 'Android Browser Switch makes it easy to open a url in a browser or Chrome Custom Tab and receive a response as the result of user interaction, either cancel or response data from the web page.'
                    url = 'https://github.com/braintree/browser-switch-android'

                    scm {
                        url = 'scm:git@github.com:braintree/browser-switch-android.git'
                        connection = 'scm:git@github.com:braintree/browser-switch-android.git'
                        developerConnection = 'scm:git@github.com:braintree/browser-switch-android.git'
                    }

                    developers {
                        developer {
                            id = 'devs'
                            name = 'Braintree Payments'
                        }
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'http://opensource.org/licenses/MIT'
                            distribution = 'repo'
                        }
                    }
                }
            }
        }
    }
}

