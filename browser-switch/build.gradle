plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    // robolectric
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.fragment:fragment:1.5.7'
    implementation 'androidx.browser:browser:1.5.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.9'
    testImplementation 'org.powermock:powermock-classloading-xstream:2.0.9'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    testImplementation 'org.skyscreamer:jsonassert:1.5.1'

    testImplementation 'org.robolectric:robolectric:4.7.3'

    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'org.mockito:mockito-android:2.28.2'
    androidTestImplementation "androidx.fragment:fragment-testing:1.5.7"
}

// region signing and publishing

task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    archiveClassifier.set('javadoc')
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

signing {
    required {
        !version.endsWith("SNAPSHOT")
    }
    sign publishing.publications
}

publishing {
    publications {
        release(MavenPublication) {
            afterEvaluate {
                from components.release
            }

            groupId = 'com.braintreepayments.api'
            artifactId = 'browser-switch'
            version = rootProject.versionName

            artifact sourcesJar
            artifact javadocsJar

            pom {
                name = 'browser-switch'
                packaging = 'aar'
                description = 'Android Browser Switch makes it easy to open a url in a browser or Chrome Custom Tab and receive a response as the result of user interaction, either cancel or response data from the web page.'
                url = 'https://github.com/braintree/browser-switch-android'

                scm {
                    url = 'scm:git@github.com:braintree/browser-switch-android.git'
                    connection = 'scm:git@github.com:braintree/browser-switch-android.git'
                    developerConnection = 'scm:git@github.com:braintree/browser-switch-android.git'
                }

                developers {
                    developer {
                        id = 'devs'
                        name = 'Braintree Payments'
                    }
                }

                licenses {
                    license {
                        name = 'MIT'
                        url = 'http://opensource.org/licenses/MIT'
                        distribution = 'repo'
                    }
                }
            }
        }
    }
}

// endregion

