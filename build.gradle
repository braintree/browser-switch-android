buildscript {
    repositories {
        mavenCentral()
        google()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }

    ext.deps = [
        'annotation'  : 'androidx.annotation:annotation:1.2.0',
        'appcompat'   : 'androidx.appcompat:appcompat:1.3.1',
        'browser'     : 'androidx.browser:browser:1.5.0',

        // test dependencies
        'junit'       : 'junit:junit:4.13.2',
        'mockitoCore' : 'org.mockito:mockito-core:3.3.3',
        'jsonassert'  : 'org.skyscreamer:jsonassert:1.5.1',
        'robolectric' : 'org.robolectric:robolectric:4.7.3'
    ]

    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
    }
}

plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

version = '2.5.0'
group = "com.braintreepayments"
ext {
    compileSdkVersion = 33
    minSdkVersion = 21
    targetSdkVersion = 33
    versionCode = 65
    versionName = version
}

ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID') ?: ''
ext["signing.password"] = System.getenv('SIGNING_KEY_PASSWORD') ?: ''
ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_KEY_FILE') ?: ''

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('SONATYPE_USERNAME')
            password = System.getenv('SONATYPE_PASSWORD')
        }
    }
    transitionCheckOptions {
        // give nexus sonatype more time to close the staging repository
        delayBetween.set(Duration.ofSeconds(20))
    }
}

task changeGradleReleaseVersion {
    doLast {
        def gradleFile = new File('build.gradle')
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion = '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion = '" + versionParam + "'")
        gradleFile.write(gradleFileText)
    }
}

task changeREADMEVersion {
    doLast {

        def readmeFile = new File('README.md')
        def readmeFileText = readmeFile.text.replaceFirst(":browser-switch:\\d+\\.\\d+\\.\\d+'", ":browser-switch:" + versionParam + "'")
        readmeFile.write(readmeFileText)
    }
}

task changeMigrationGuideVersion {
    doLast {
        def migrationGuideFile = new File('v2_MIGRATION.md')
        def migrationGuideFileText = migrationGuideFile.text.replaceAll(":\\d+\\.\\d+\\.\\d+(-.*)?'", ":" + versionParam + "'")
        migrationGuideFile.write(migrationGuideFileText)
    }
}

task updateCHANGELOGVersion {
    doLast {
        def changelogFile = new File('CHANGELOG.md')
        def changelogFileText = changelogFile.text.replaceFirst("## unreleased", "## " + versionParam)
        changelogFile.write(changelogFileText)
    }
}

task incrementSNAPSHOTVersion {
    doLast {
        def gradleFile = new File('build.gradle')
        def (major, minor, patch) = versionParam.tokenize('.')
        def patchInteger = patch.toInteger()
        def newVersion = "$major.$minor.${patchInteger + 1}-SNAPSHOT"
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion = '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion = '" + newVersion + "'")
        gradleFile.write(gradleFileText)

        // update README snapshot version
        def readmeFile = new File('README.md')
        def readmeFileText = readmeFile.text.replaceFirst(":browser-switch:\\d+\\.\\d+\\.\\d+-SNAPSHOT'", ":browser-switch:" + newVersion + "'")
        readmeFile.write(readmeFileText)
    }
}

task incrementVersionCode {
    doLast {
        def gradleFile = new File('build.gradle')
        def versionText = gradleFile.text.find("versionCode = \\d+")
        def params = versionText.split("=")
        def newVersionCode = params[1].trim().toInteger() + 1
        def gradleFileText = gradleFile.text.replaceFirst("versionCode = \\d+", "versionCode = " + newVersionCode)
        gradleFile.write(gradleFileText)
    }
}