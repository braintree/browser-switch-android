buildscript {
    repositories {
        mavenCentral()
        google()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }

    def sdkTargetJavaVersion = JavaVersion.VERSION_17
    ext.versions = [
        "javaSourceCompatibility": sdkTargetJavaVersion,
        "javaTargetCompatibility": sdkTargetJavaVersion,
    ]


    ext.deps = [
        'annotation'  : 'androidx.annotation:annotation:1.7.0',
        'appcompat'   : 'androidx.appcompat:appcompat:1.6.0',
        'browser'     : 'androidx.browser:browser:1.7.0',
        'kotlin'      : 'org.jetbrains.kotlin:kotlin-stdlib:1.9.20',

        // test dependencies
        'junit'       : 'junit:junit:4.13.2',
        'mockitoCore' : 'org.mockito:mockito-core:5.7.0',
        'jsonassert'  : 'org.skyscreamer:jsonassert:1.5.1',
        'robolectric' : 'org.robolectric:robolectric:4.11.1'
    ]

    dependencies {
        classpath 'com.android.tools.build:gradle:8.5.2'
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.10'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0'
    }
}

plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'org.jetbrains.dokka' version '1.9.10'
    id 'org.jetbrains.kotlin.android' version '1.8.10' apply false
}

version = '3.0.0-beta2-SNAPSHOT'
group = "com.braintreepayments"
ext {
    compileSdkVersion = 35
    minSdkVersion = 23
    targetSdkVersion = 35
    versionCode = 71
    versionName = version
}

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('SONATYPE_NEXUS_USERNAME') ?: ''
            password = System.getenv('SONATYPE_NEXUS_PASSWORD') ?: ''
        }
    }
    transitionCheckOptions {
        // give nexus sonatype more time to close the staging repository
        delayBetween.set(Duration.ofSeconds(20))
    }
}

dokkaHtmlMultiModule.configure {
    // redirect dokka output to GitHub pages root directory
    outputDirectory.set(project.file("docs"))
}

task changeGradleReleaseVersion {
    doLast {
        def gradleFile = new File('build.gradle')
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion = '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion = '" + versionParam + "'")
        gradleFile.write(gradleFileText)
    }
}

task changeREADMEVersion {
    doLast {
        def readmeFile = new File('README.md')
        def readmeFileText = readmeFile.text.replaceFirst(":browser-switch:\\d+\\.\\d+\\.\\d+(-.*)?'", ":browser-switch:" + versionParam + "'")
        readmeFile.write(readmeFileText)
    }
}

task changeMigrationGuideVersion {
    doLast {
        def migrationGuideFile = new File('v3_MIGRATION_GUIDE.md')
        def migrationGuideFileText = migrationGuideFile.text.replaceAll(":\\d+\\.\\d+\\.\\d+(-.*)?'", ":" + versionParam + "'")
        migrationGuideFile.write(migrationGuideFileText)
    }
}

task updateCHANGELOGVersion {
    doLast {
        def changelogFile = new File('CHANGELOG.md')
        def changelogFileText = changelogFile.text.replaceFirst("## unreleased", "## " + versionParam)
        changelogFile.write(changelogFileText)
    }
}

task incrementSNAPSHOTVersion {
    doLast {
        def gradleFile = new File('build.gradle')
        def (major, minor, patch) = versionParam.tokenize('.')
        def patchInteger = patch[-1].toInteger()
        patchInteger++
        def newPatch = patch.substring(0,patch.length()-1) + patchInteger.toString()
        def newVersion = "$major.$minor.$newPatch-SNAPSHOT"
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion = '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion = '" + newVersion + "'")
        gradleFile.write(gradleFileText)

        // update README snapshot version
        def readmeFile = new File('README.md')
        def readmeFileText = readmeFile.text.replaceFirst(":browser-switch:\\d+\\.\\d+\\.\\d+-SNAPSHOT'", ":browser-switch:" + newVersion + "'")
        readmeFile.write(readmeFileText)
    }
}

task incrementVersionCode {
    doLast {
        def gradleFile = new File('build.gradle')
        def versionText = gradleFile.text.find("versionCode = \\d+")
        def params = versionText.split("=")
        def newVersionCode = params[1].trim().toInteger() + 1
        def gradleFileText = gradleFile.text.replaceFirst("versionCode = \\d+", "versionCode = " + newVersionCode)
        gradleFile.write(gradleFileText)
    }
}